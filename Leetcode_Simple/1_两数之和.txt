# 两数之和

给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出* 和为目标值 *的那* 两个 *整数，并返回它们的数组下标。

你可以假设每种输入只会对应一个答案。但是数组中同一个元素在答案里不能重复出现。

你可以按任意顺序返回答案。 

* 示例一： *
```
输入：nums = [2, 7, 11, 15], target = 9
输出：[0, 1]
解释：因为 nums[0] + nums[1] == 9，返回 [0, 1]
```

* 示例二： *
```
输入：nums = [2, 3, 4], target = 6
输出：[1,  2]
```

* 示例三： *
```
输入：nums = [3, 3], target = 6
输出：[0,  1]
```

* 提示： *
*  2 <= nums.length <= 103
* -109 <= nums[i] <= 109
* -109 <= target <= 109
* 只会存在一个有效答案

## C#

### 方法一：暴力法

```
 public int[] TwoSum(int[] nums, int target)
    {
        for (int i = 0; i < nums.Length; i++)
        {
            for (int j = i + 1; j < nums.Length; j++)
            {
                if (nums[i] + nums[j] == target)
                {
                    return new int[] { i, j };
                }
            }
        }
        return new int[] { 0, 0 };
    }
```